@page "/settings"
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Extensions

<h3>Settings</h3>

<FluentDesignTheme @bind-Mode="@Mode" @bind-OfficeColor="@OfficeColor" StorageName="theme" />

<div style="min-height: 250px;">
  <FluentGrid>
    <FluentGridItem>
      <FluentSelect Label="Theme"
                    Width="250px"
                    Items="@(Enum.GetValues<DesignThemeModes>())"
                    @bind-SelectedOption="@Mode" />
    </FluentGridItem>

    <FluentGridItem>
      <FluentSelect Label="Color"
                    Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))"
                    Height="200px"
                    Width="250px"
                    @bind-SelectedOption="@OfficeColor">
        <OptionTemplate>
          <FluentStack>
            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Filled.Size20.RectangleLandscape())"
                        Color="Color.Custom"
                        CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4" )" />
            <FluentLabel>@context</FluentLabel>
          </FluentStack>
        </OptionTemplate>
      </FluentSelect>
      <FluentButton Appearance="Appearance.Accent" OnClick="PickRandomColor">Feeling lucky?</FluentButton>
    </FluentGridItem>
  </FluentGrid>
</div>

@code
{
  public DesignThemeModes Mode { get; set; }
  public OfficeColor? OfficeColor { get; set; }

  void OnLoaded(LoadedEventArgs e)
  {
    Console.WriteLine($"Loaded: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
  }

  void OnLuminanceChanged(LuminanceChangedEventArgs e)
  {
    Console.WriteLine($"Changed: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
  }

  void PickRandomColor()
  {
    OfficeColor = OfficeColorUtilities.GetRandom();
  }
}
